@function c($c, $tone: '1') {
  @return map-get(map-get($cs, $c), $tone);
}

@function s($s, $sizes: 'h1') {
  @return map-get(map-get($header-sizes, $s), $sizes);
}

// generate header classes
@mixin generate-sizes($class, $h1, $h2, $h3, $h4, $h5, $h6) {
    .#{$class}-h1 { font-size: $h1; }
    .#{$class}-h2 { font-size: $h2; }
    .#{$class}-h3 { font-size: $h3; }
    .#{$class}-h4 { font-size: $h4; }
    .#{$class}-h5 { font-size: $h5; }
    .#{$class}-h6 { font-size: $h6; }
}

// generate responsive font-sizes
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}

