// Prefixer
@mixin prefixr ($attr, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      -webkit-#{$attr}: $value;
    }
    @else if $prefix == moz {
      -moz-#{$attr}: $value;
    }
    @else if $prefix == cstm {
      #{$attr}: $value;
    }
  }
}

// Multicolumn @mixin
@mixin col-cstm($col-width: 250px, $col-count: 0, $col-gap: 20px, $col-rule: false) {
  $base-unit-type: 1px;
  $base-unit-size: 1;
  $base-unit: $base-unit-type * $base-unit-size !default;
  @include prefixr(column-width, $col-width, webkit moz cstm);
  @if type-of($col-count) == number and unitless($col-count) {
    @include prefixr(column-count, $col-count, webkit moz cstm);
  }
  @else if type-of($col-count) == number and not unit($base-unit) != px {
    @include prefixr(column-count, 2, webkit moz cstm);
    $col-count: $col-gap;
  }
  @else if type-of($col-count) == number and not unitless($col-count) or length($col-count) > 1 {
    @include prefixr(column-count, 2, webkit moz cstm);
    $col-rule-coords: $col-count;
      $width: nth($col-rule-coords, 1);
      $style: nth($col-rule-coords, 2);
      $color: nth($col-rule-coords, 3);
      @include prefixr(column-rule, $width $style $color, webkit moz cstm);
  }
  @if length($col-gap) > 1 {
    @include prefixr(column-gap, 20px, webkit moz cstm);
    $col-rule-coords: $col-gap;
      $width: nth($col-rule-coords, 1);
      $style: nth($col-rule-coords, 2);
      $color: nth($col-rule-coords, 3);
      @include prefixr(column-rule, $width $style $color, webkit moz cstm);
  }
  @else if length($col-gap) == 1 {
    @include prefixr(column-gap, $col-gap, webkit moz cstm);
  }
  @if $col-rule != false {
    $col-rule-coords: $col-rule;
      $width: nth($col-rule-coords, 1);
      $style: nth($col-rule-coords, 2);
      $color: nth($col-rule-coords, 3);
      @include prefixr(column-rule, $width $style $color, webkit moz cstm);
  }
}
